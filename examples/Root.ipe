module Root exports [main, x, y, z, X]

import Prelude
import Dict
import Json
import Json.Encode
import Console

encodeTest : Json.Value
encodeTest =
    Dict.empty {}
    |> Dict.insert 'a' (Json.Encode.string 'b')
    |> Dict.insert 'c' (Json.Encode.number 1)
    |> Json.Encode.object

main : {} -> Dict.Dict String String
main = \a -> 'abc'
    |> Console.andLog '123'
    |> dictSingleton 'a'

dictSingleton : String -> a -> Dict.Dict String a
dictSingleton = \key value -> Dict.empty {}
    |> Dict.insert key value

x : X
x = A 'abcde'

y : Number
y = match [1,2,3] with
    | [] -> 2
    | [1, 2, 3] -> 3
    | [a, b, c] -> Prelude.add a b
    | _ -> 1

z : String
z = match A 'abc' with
    | A n -> n
    | B -> 'B'
    | C -> 'C'

type union X = 
  | A String
  | B
  | C 
